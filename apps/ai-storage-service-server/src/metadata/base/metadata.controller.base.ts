/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MetadataService } from "../metadata.service";
import { MetadataCreateInput } from "./MetadataCreateInput";
import { Metadata } from "./Metadata";
import { MetadataFindManyArgs } from "./MetadataFindManyArgs";
import { MetadataWhereUniqueInput } from "./MetadataWhereUniqueInput";
import { MetadataUpdateInput } from "./MetadataUpdateInput";

export class MetadataControllerBase {
  constructor(protected readonly service: MetadataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Metadata })
  async createMetadata(
    @common.Body() data: MetadataCreateInput
  ): Promise<Metadata> {
    return await this.service.createMetadata({
      data: data,
      select: {
        attributeName: true,
        attributeValue: true,
        createdAt: true,
        id: true,
        itemId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Metadata] })
  @ApiNestedQuery(MetadataFindManyArgs)
  async metadataItems(@common.Req() request: Request): Promise<Metadata[]> {
    const args = plainToClass(MetadataFindManyArgs, request.query);
    return this.service.metadataItems({
      ...args,
      select: {
        attributeName: true,
        attributeValue: true,
        createdAt: true,
        id: true,
        itemId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Metadata })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async metadata(
    @common.Param() params: MetadataWhereUniqueInput
  ): Promise<Metadata | null> {
    const result = await this.service.metadata({
      where: params,
      select: {
        attributeName: true,
        attributeValue: true,
        createdAt: true,
        id: true,
        itemId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Metadata })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMetadata(
    @common.Param() params: MetadataWhereUniqueInput,
    @common.Body() data: MetadataUpdateInput
  ): Promise<Metadata | null> {
    try {
      return await this.service.updateMetadata({
        where: params,
        data: data,
        select: {
          attributeName: true,
          attributeValue: true,
          createdAt: true,
          id: true,
          itemId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Metadata })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMetadata(
    @common.Param() params: MetadataWhereUniqueInput
  ): Promise<Metadata | null> {
    try {
      return await this.service.deleteMetadata({
        where: params,
        select: {
          attributeName: true,
          attributeValue: true,
          createdAt: true,
          id: true,
          itemId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
